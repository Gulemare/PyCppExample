Небольшая инструкция по интеграции кода на C++ в Python средствами Boost::Python.

----------------------------------------------------------------------
НАСТРОЙКА БУСТА И ПРОЕКТА БИБЛИОТЕКИ
Частично инструкция отсюда: https://habrahabr.ru/post/168083/

1) Скачать boost

2) В корневой директории буста запустить из командной строки:
	Bootstrap

3) (Иногда этот шаг не нужен) Найти где то в папке буста файл user-config.jam  
	Переместить его в C:/Users/User и добавить строки с заменой путей:
# ---------------------
# Python configuration.
# ---------------------

# Configure specific Python version.

using python 
    : 2.7                   # Version
    : D:\\devel\\tools\\Python27\\python.exe      # Python Path
    : D:\\devel\\tools\\Python27\\include         # include path
    : D:\\devel\\tools\\Python27\\libs            # lib path(s)
    : <define>BOOST_ALL_NO_LIB=1
    ;

4) Запустить в командной строке из корневой директории буста на выбор:
	b2 --build-type=complete --with-python stage - для 32-битной версии Питона
	b2 --build-type=complete address-model=64 --with-python stage - для 64-битной версии Питона

5) Нужные либы появятся в Boost/stage/lib/

6) Создать пустой проект библиотеки dll в Visual Studio, 
	добавить весь нужный код, ЗАБЫВ ПРО ВСЯКИЕ
	__declspec(dllexport) и extern "C" {}

7) В настройках проекта указать дополнительные директории заголовков:
	- До корневой папки буста Boost/
	- До файлов включений питона: Python27/include/
	
8) Указать линковщику папки дополнительных библиотек:
	- До Boost/stage/lib/
	- До Python27/libs/
	Явно указывать линковщику имена библиотек НЕ НУЖНО

9) В настройках проекта Build Events -> Post-Build Event:
	Command Line: MOVE /Y %(TargetPath) [Нужное_Расположение_Библиотеки/Название_Модуля.pyd]
	Это просто перемещает собранную dll в папку проекта и помечает как скомпилированный модуль питона
	!!! Во избежание неприятностей, Название_Модуля должно быть таким же как в макросе BOOST_PYTHON_MODULE(...) в файле-обертке
	
10) Теперь в питоне можно просто импортировать всё содержимое:
	from Название_Библиотеки import *
	и использовать скомпилированный C++ код через созданную обертку
	
---------------------------------------------------------------------------------------------------
СОЗДАНИЕ ОБЕРТКИ ДЛЯ КОДА НА ПЛЮСАХ

Для создания обертки необходимо создать в проекте библиотеки файл, например, pywrapper.cpp,
подключить к нему все необходимые заголовки и описать весь функционал, доступный из питона,
используя возможности Boost::Python http://www.boost.org/doc/libs/1_52_0/libs/python/doc/v2/reference.html
Мой пример:

---------------------------------------------------------------------------------------------------
ТЕСТИРОВАНИЕ СОЗДАННОЙ БИБЛИОТЕКИ

Либо дополнительным проектом создавать привычную .dll с экспортом символов и проект тестирования
Либо тестировать созданную .pyd уже непосредственно в питоне





	
	
	
	